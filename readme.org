* neovim config
  我现在正在用emacs来写org文件，对此我们不应该非此即彼（虽热我纠结了好几天），要用包容的心态。来面对一切事物。
** mapping

*** mapleader 
    推荐空格键
*** 切换命令模式
#+BEGIN_SRC 

noremap ; :

#+END_SRC
*** 基本映射
    尽量使用单独的键即可，不需要太多的键(单个字母)。大写的键其实就是Shift+w（与<Silent>还不是一样）
**** 插入
#+BEGIN_SRC 
nnoremap S :s<CR>
#+END_SRC

**** 保存
#+BEGIN_SRC 
nnoremap W :w<CR>
#+END_SRC

**** 退出
#+BEGIN_SRC 
nnoremap Q :q<CR>
#+END_SRC


** move 
*** normal 
**** 进入命令行操作（快进快退）
**** 进入文件管理系统寻找文件（不如emacs的方便）
**** 进入搜索界面（查询单词、文件、buffer）
**** 快速移动
***** 多单词
#+BEGIN_SRC 
noremap W 5w
noremap B 5b
#+END_SRC
***** 多行移动
#+BEGIN_SRC 
noremap U 5k
noremap E 5j
#+END_SRC


*** insert
**** 像emacs那样操作行文字（移动、删除等等）
#+BEGIN_SRC 
imap <C-e> <END>
imap <C-a> <HOME>
imap <C-f> <Right>
imap <C-b> <Left>
imap <C-p> <UP>
imap <C-n> <DOWN>
#+END_SRC

**** 切换模式
     一般是切换到normal模式，有的人是使用C-C、jj类似的。
**** 自动补全的tab，需要注意与第三方的插件是否有冲突。

*** terminal

*** command

** editor

** search
   推荐: ripgrep
#+BEGIN_SRC 
Plug 'Yggdroot/LeaderF', { 'do': './install.sh' }
" don't show the help in normal mode
let g:Lf_HideHelp = 1
let g:Lf_UseCache = 0
let g:Lf_UseVersionControlTool = 0
let g:Lf_IgnoreCurrentBufferName = 1
" popup mode
let g:Lf_WindowPosition = 'popup'
let g:Lf_PreviewInPopup = 1
let g:Lf_StlSeparator = { 'left': "\ue0b0", 'right': "\ue0b2", 'font': "DejaVu Sans Mono for Powerline" }
let g:Lf_PreviewResult = {'Function': 0, 'BufTag': 0 }

let g:Lf_ShortcutF = "<leader>ff"
noremap fb :<C-U><C-R>=printf("Leaderf buffer %s", "")<CR><CR>
noremap fm :<C-U><C-R>=printf("Leaderf mru %s", "")<CR><CR>
noremap <leader>ft :<C-U><C-R>=printf("Leaderf bufTag %s", "")<CR><CR>
noremap fl :<C-U><C-R>=printf("Leaderf line %s", "")<CR><CR>

" noremap <C-B> :<C-U><C-R>=printf("Leaderf! rg --current-buffer -e %s ", expand("<cword>"))<CR>
" noremap <C-F> :<C-U><C-R>=printf("Leaderf! rg -e %s ", expand("<cword>"))<CR>
" search visually selected text literally
xnoremap gf :<C-U><C-R>=printf("Leaderf! rg -F -e %s ", leaderf#Rg#visual())<CR>
noremap go :<C-U>Leaderf! rg --recall<CR>

" should use `Leaderf gtags --update` first
let g:Lf_GtagsAutoGenerate = 0
let g:Lf_Gtagslabel = 'native-pygments'
noremap <leader>fr :<C-U><C-R>=printf("Leaderf! gtags -r %s --auto-jump", expand("<cword>"))<CR><CR>
noremap <leader>fd :<C-U><C-R>=printf("Leaderf! gtags -d %s --auto-jump", expand("<cword>"))<CR><CR>
noremap <leader>fo :<C-U><C-R>=printf("Leaderf! gtags --recall %s", "")<CR><CR>
noremap <leader>fn :<C-U><C-R>=printf("Leaderf gtags --next %s", "")<CR><CR>
noremap <leader>fp :<C-U><C-R>=printf("Leaderf gtags --previous %s", "")<CR><CR>
#+END_SRC


** file manager
#+BEGIN_SRC 
Plug 'kevinhwang91/rnvimr'
let g:rnvimr_ex_enable = 1
let g:rnvimr_pick_enable = 1
let g:rnvimr_draw_border = 0
" let g:rnvimr_bw_enable = 1
highlight link RnvimrNormal CursorLine
nnoremap <silent> R :RnvimrToggle<CR><C-\><C-n>:RnvimrResize 0<CR>
let g:rnvimr_action = {
            \ '<C-t>': 'NvimEdit tabedit',
            \ '<C-x>': 'NvimEdit split',
            \ '<C-v>': 'NvimEdit vsplit',
            \ 'gw': 'JumpNvimCwd',
            \ 'yw': 'EmitRangerCwd'
            \ }
let g:rnvimr_layout = { 'relative': 'editor',
            \ 'width': &columns,
            \ 'height': &lines,
            \ 'col': 0,
            \ 'row': 0,
            \ 'style': 'minimal' }
let g:rnvimr_presets = [{'width': 1.0, 'height': 1.0}]
#+END_SRC


** terminal 
   命令行基本控制
#+BEGIN_SRC 
nnoremap ts :te<CR>
let g:neoterm_autoscroll = 1
autocmd TermOpen term://* startinsert
tnoremap <C-N> <C-\><C-N>
tnoremap <C-O> <C-\><C-N><C-O>
let g:terminal_color_0  = '#000000'
let g:terminal_color_1  = '#FF5555'
let g:terminal_color_2  = '#50FA7B'
let g:terminal_color_3  = '#F1FA8C'
let g:terminal_color_4  = '#BD93F9'
let g:terminal_color_5  = '#FF79C6'
let g:terminal_color_6  = '#8BE9FD'
let g:terminal_color_7  = '#BFBFBF'
let g:terminal_color_8  = '#4D4D4D'
let g:terminal_color_9  = '#FF6E67'
let g:terminal_color_10 = '#5AF78E'
let g:terminal_color_11 = '#F4F99D'
let g:terminal_color_12 = '#CAA9FA'
let g:terminal_color_13 = '#FF92D0'
let g:terminal_color_14 = '#9AEDFE'
#+END_SRC


** AutoComplete
*** coc.nvim


** theme

*** 特殊
**** 自动补全、高亮行、列
#+BEGIN_SRC 
" 修改补全的提示框颜色，默认是粉红色
highlight Pmenu ctermfg=15 ctermbg=0 guifg=darkgrey guibg=black
highlight CursorLine   cterm=NONE ctermbg=black ctermfg=red guibg=NONE guifg=NONE
highlight CursorColumn cterm=NONE ctermbg=black ctermfg=yellow guibg=NONE guifg=NONE
#+END_SRC

